from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add(KeyboardButton("–ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞"))
menu_keyboard.add(KeyboardButton("–í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞"))
menu_keyboard.add(KeyboardButton("–ì–∞—Ä–Ω–∏—Ä—ã"))
menu_keyboard.add(KeyboardButton("–°–∞–ª–∞—Ç—ã"))
menu_keyboard.add(KeyboardButton("–•–∏—Ç—ã"))

# –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é
menu = {
    "–ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞": ["–±–æ—Ä—â", "—Å–æ–ª—è–Ω–∫–∞", "–≥–æ—Ä–æ—Ö–æ–≤—ã–π —Å—É–ø"],
    "–í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞": [
        "–∫–æ—Ç–ª–µ—Ç–∞ –≥–æ–≤—è–∂—å—è", "–∫–æ—Ç–ª–µ—Ç–∞ –∫—É—Ä–∏–Ω–∞—è", "–∫–æ—Ç–ª–µ—Ç–∞ —Å–≤–∏–Ω–∞—è",
        "–±–∏—Ñ—à—Ç–µ–∫—Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–±–∏—Ç–æ–∫ –∫—É—Ä–∏–Ω—ã–π", "–≥–æ–ª—É–±—á–∏–∫–∏",
        "–ø–µ—Ä–µ—Ü —Ñ–∞—Ä—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "—Ç–µ—Ñ—Ç–µ–ª–∏", "—Ç–µ—Ñ—Ç–µ–ª–∏ –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã",
        "–æ–ª–∞–¥—å–∏ –∏–∑ –ø–µ—á–µ–Ω–∏"
    ],
    "–ì–∞—Ä–Ω–∏—Ä—ã": ["—Ä–∏—Å", "–ø—é—Ä–µ", "–≥—Ä–µ—á–∫–∞", "–º–∞–∫–∞—Ä–æ–Ω—ã"],
    "–°–∞–ª–∞—Ç—ã": ["–≤–∏–Ω–µ–≥—Ä–µ—Ç", "–æ–ª–∏–≤—å–µ"],
    "–•–∏—Ç—ã": ["–ö—É—Ä–∏—Ü–∞ –≥—Ä–∏–ª—å üçóüî•"]
}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("üçΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=menu_keyboard)

@dp.message_handler(lambda message: message.text in menu.keys())
async def show_category(message: types.Message):
    category = message.text
    dishes = "\n".join(f"üç¥ {dish}" for dish in menu[category])
    await message.answer(f"<b>{category}:</b>\n{dishes}", parse_mode="HTML")

@dp.message_handler(lambda message: message.text == "–•–∏—Ç—ã")
async def show_hit(message: types.Message):
    await message.answer("üî• <b>–•–∏—Ç –º–µ–Ω—é:</b> üî•\n" + menu["–•–∏—Ç—ã"][0], parse_mode="HTML")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
