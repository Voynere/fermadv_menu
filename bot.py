from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.enums import ParseMode
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "**********************************************"
ADMIN_USERNAME = "78689787876"  # –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é
menu_db = {
    "first_courses": ["–ë–æ—Ä—â", "–°–æ–ª—è–Ω–∫–∞", "–ì–æ—Ä–æ—Ö–æ–≤—ã–π —Å—É–ø"],
    "main_courses": [
        "–ö–æ—Ç–ª–µ—Ç–∞ –∫—É—Ä–∏–Ω–∞—è",
        "–ö–æ—Ç–ª–µ—Ç–∞ —Å–≤–∏–Ω–∞—è", 
        "–ë–∏—Ñ—à—Ç–µ–∫—Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π",
        "–ë–∏—Ç–æ–∫ –∫—É—Ä–∏–Ω—ã–π",
        "–ì–æ–ª—É–±—á–∏–∫–∏",
        "–¢–µ—Ñ—Ç–µ–ª–∏ –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã",
        "–û–ª–∞–¥—å–∏ –∏–∑ –ø–µ—á–µ–Ω–∏"
    ],
    "sides": ["–ü—é—Ä–µ", "–ì—Ä–µ—á–∫–∞", "–ú–∞–∫–∞—Ä–æ–Ω—ã", "–†–∏—Å"],
    "salads": ["–í–∏–Ω–µ–≥—Ä–µ—Ç", "–û–ª–∏–≤—å–µ"],
    "specials": ["–ö—É—Ä–∏—Ü–∞ –≥—Ä–∏–ª—å üçóüî•"]
}

# –ö–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_carts = {}

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def main_menu_kb():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üçú –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞"),
        KeyboardButton(text="üçñ –í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞")
    )
    builder.row(
        KeyboardButton(text="üçö –ì–∞—Ä–Ω–∏—Ä—ã"),
        KeyboardButton(text="ü•ó –°–∞–ª–∞—Ç—ã")
    )
    builder.row(KeyboardButton(text="üî• –•–∏—Ç—ã –¥–Ω—è"))
    builder.row(KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)

def back_to_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

# ===== –ö–û–ú–ê–ù–î–´ =====
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    user_carts[user_id] = []
    await message.answer(
        "üçΩ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FermaDv!</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=main_menu_kb()
    )

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–ù–Æ =====
@dp.message(Text(text=["üçú –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞", "üçñ –í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞", "üçö –ì–∞—Ä–Ω–∏—Ä—ã", "ü•ó –°–∞–ª–∞—Ç—ã"]))
async def show_menu(message: types.Message):
    category_map = {
        "üçú –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞": "first_courses",
        "üçñ –í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞": "main_courses", 
        "üçö –ì–∞—Ä–Ω–∏—Ä—ã": "sides",
        "ü•ó –°–∞–ª–∞—Ç—ã": "salads"
    }
    
    category = category_map[message.text]
    builder = ReplyKeyboardBuilder()
    
    for item in menu_db[category]:
        builder.add(KeyboardButton(text=f"‚ûï {item}"))
    builder.adjust(2)
    builder.row(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    
    await message.answer(
        f"–ú–µ–Ω—é {message.text}:",
        reply_markup=builder.as_markup()
    )

@dp.message(Text(text="üî• –•–∏—Ç—ã –¥–Ω—è"))
async def show_specials(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text=f"‚ûï {menu_db['specials'][0]}"))
    builder.row(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    
    await message.answer(
        "üî• <b>–•–∏—Ç –¥–Ω—è!</b>",
        reply_markup=builder.as_markup()
    )

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–†–ó–ò–ù–´ =====
@dp.message(Text(startswith="‚ûï "))
async def add_to_cart(message: types.Message):
    item = message.text[2:]
    user_id = message.from_user.id
    
    if user_id not in user_carts:
        user_carts[user_id] = []
    
    user_carts[user_id].append(item)
    await message.answer(
        f"‚úÖ {item} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
        reply_markup=back_to_menu_kb()
    )

@dp.message(Text(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"))
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    
    if not cart:
        await message.answer(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
            reply_markup=main_menu_kb()
        )
        return
    
    cart_text = "\n".join(f"‚Ä¢ {item}" for item in cart)
    await message.answer(
        f"üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n{cart_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
                [KeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(Text(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω–∞"))
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    user_carts[user_id] = []
    await message.answer(
        "üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!",
        reply_markup=main_menu_kb()
    )

# ===== –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê =====
@dp.message(Text(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"))
async def process_order(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    
    if not cart:
        await message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_text = (
        f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: @{message.from_user.username}\n"
        f"üÜî ID: {user_id}\n"
        f"üìû –ò–º—è: {message.from_user.full_name}\n\n"
        "üçΩ <b>–ó–∞–∫–∞–∑:</b>\n" + 
        "\n".join(f"- {item}" for item in cart)
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    contact_btn = InlineKeyboardButton(
        text="–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
        url=f"tg://user?id={user_id}"
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        await bot.send_message(
            chat_id=ADMIN_USERNAME,
            text=order_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[contact_btn]])
        )
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            "–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üç¥",
            reply_markup=main_menu_kb()
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        user_carts[user_id] = []
        
    except Exception as e:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_kb()
        )
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "–ù–ê–ó–ê–î" =====
@dp.message(Text(text="üîô –ù–∞–∑–∞–¥"))
async def back_handler(message: types.Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_kb()
    )

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

if __name__ == "__main__":
    asyncio.run(main())
